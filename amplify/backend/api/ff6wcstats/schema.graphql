# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
type User @model {
  id: ID!
  discordUserId: String! @primaryKey
  discordUserName: String!
  discordDiscriminator: String!
  discordAvatarUrl: String!
  lastLogin: AWSDateTime
  runs: [Run] @hasMany(indexName: "byUser", fields: ["discordUserId"])
  role: String @default(value: "user")
}

type Run @model @auth(rules: [{ allow: public }]) {
  id: ID!
  user: User! @belongsTo(fields: ["userId"])
  userId: String!
    @index(
      name: "byUser"
      queryField: "RunsByTime"
      sortKeyFields: ["runTime", "attempt"]
    )
    @index(
      name: "byAttempt"
      queryField: "RunsByAttempt"
      sortKeyFields: ["attempt"]
    )
  runDate: String!
  attempt: Int!
  runTime: String!
  runTimeRaw: Int!
  ktStartTime: String
  ktStartTimeRaw: Int
  kefkaTime: String
  kefkaTimeRaw: Int
  flagset: Flagset!
  otherFlagset: String
  chars: [Character]!
  abilities: [Ability]!
  numOfChars: Int!
  numOfEspers: Int!
  numOfChecks: Int!
  numOfDeadchecks: Int!
  numOfPeekedChecks: Int
  numOfBosses: Int!
  skip: Boolean!
  dragons: [Dragon]!
  finalBattle: [FinalBattleTrait]
  highestLevel: Int
  superBalls: Superballs
  egg: Egg
  auction: Auction
  thiefPeek: ThiefPeek
  thiefReward: ThiefReward
  coliseum: Coliseum
  race: Race
  mood: Mood
  seed: String
  raceId: String
  statsCompanionUpload: Boolean
  statsCompanionRaw: AWSJSON
}

type RunConnection {
  items: [Run]
  nextToken: String
}

type Query {
  runsForUser(userId: ID!, limit: Int, nextToken: String): RunConnection
}

type Mutation {
  submitRun(
    runTime: String!
    runDate: String!
    flagset: Flagset
    otherFlagset: String
    ktStartTime: String
    kefkaTime: String
    userId: String!
    chars: [Character]!
    abilities: [Ability]!
    disableAbilityCheck: Boolean!
    numOfChars: String!
    numOfEspers: String!
    numOfChecks: String!
    numOfPeekedChecks: String
    numOfBosses: String!
    numOfChests: String
    skip: Boolean!
    dragons: [Dragon]!
    finalBattle: [FinalBattleTrait]
    highestLevel: String
    superBalls: Superballs
    egg: Egg
    auction: Auction
    thiefPeek: ThiefPeek
    thiefReward: ThiefReward
    coliseum: Coliseum
    race: Race
    mood: Mood
    seed: String
    raceId: String
    statsCompanionUpload: Boolean
    statsCompanionRaw: AWSJSON
  ): String
}

enum Character {
  Terra
  Locke
  Edgar
  Shadow
  Sabin
  Celes
  Cyan
  Gau
  Setzer
  Mog
  Strago
  Relm
  Gogo
  Umaro
}

enum Ability {
  Blitz
  Capture
  Control
  Dance
  GP_Rain
  Health
  Jump
  Lore
  Morph
  Rage
  Runic
  Sketch
  Slot
  Steal
  SwdTech
  Throw
  Tools
  X_Magic
  Shock
  MagiTek
  Possess
}

enum Dragon {
  Mt_Zozo
  Phoenix_Cave
  Narshe
  Ancient_Castle
  Fanatics_Tower
  Opera_House
  Kefka_Tower__Left
  Kefka_Tower__Right
}

enum FinalBattleTrait {
  Instant_Death
  Mute
  Calmness_Protection
  Did_not_record
}

enum ThiefPeek {
  Not_recorded
  Did_not_check
  Checked_WOB_only
  Checked_WOR_only
  Checked_both
}

enum ThiefReward {
  Not_recorded
  Did_not_buy__Item
  Did_not_buy__Esper
  Did_not_buy__Unknown
  Bought_Item
  Bought_Esper
}

enum Coliseum {
  Not_recorded
  Did_not_visit
  Visited_but_did_not_fight
  Visited_and_fought
}

enum Egg {
  Not_recorded
  No
  Yes
}

enum Superballs {
  Not_recorded
  No
  Yes
}

enum Auction {
  Not_recorded
  Zero
  One
  Two
}

enum Flagset {
  Ultros_League
  Ultros_League__Season_3
  Ultros_League__Season_4
  Ultros_League__Season_5
  Moogles_First_Tournament
  TotM__Glass_Cannon
  Coliseum__Terra
  Coliseum__Locke
  Coliseum__Edgar
  Coliseum__Sabin
  Coliseum__Cyan
  Coliseum__Gau
  Coliseum__Celes
  Coliseum__Setzer
  Coliseum__Strago
  Coliseum__Relm
  Coliseum__Shadow
  Coliseum__Mog
  Coliseum__Gogo
  Coliseum__Umaro
  Other
}

enum Race {
  No_Race
  Practice_Race
  Tournament_Race
}

enum Mood {
  Not_recorded
  One
  Two
  Three
  Four
  Five
}
